# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-anU9gBSpwigRuo6miuiMbUgL-ZVAEjH
"""

!pip3 install stocknews matplotlib yfinance requests beautifulsoup4 GoogleNews textblob

import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from datetime import timedelta
from GoogleNews import GoogleNews
from textblob import TextBlob

from stocknews import StockNews
temp='RDDT'
sn = StockNews([temp])

df = sn.read_rss()
stocks = [temp]
sn = StockNews(stocks, wt_key='MY_WORLD_TRADING_DATA_KEY')
df = sn.summarize()

df=df[0]
df

df_filtered = df[df['stock'] == temp].reset_index(drop=True)
df_filtered
df_filtered['news_dt'] = pd.to_datetime(df_filtered['news_dt'])

# Sort the dataframe by 'published' column in descending order
sorted_df = df_filtered.sort_values(by='news_dt', ascending=False)
df_filtered

start=df_filtered['news_dt'].min().date()

start -= timedelta(days=1)

end=df_filtered['news_dt'].max().date()
end += timedelta(days=1)

stock_symbol = temp
stock_data = yf.download(stock_symbol, start, end)

fig, ax1 = plt.subplots(figsize=(10, 6))

color = 'tab:blue'
ax1.set_xlabel('Date')
ax1.set_ylabel('Sentiment Score', color=color)
#ax1.plot(df['news_dt'], df['sentiment_summary_avg'], label='Sentiment Summary Avg', color='blue')
ax1.plot(df_filtered['news_dt'], df_filtered['sentiment_summary_avg'], label='Sentiment Summary', color='orange')
#ax1.plot(df['news_dt'], df['sentiment_title_avg'], label='Sentiment Title Avg', color='green')
#ax1.plot(df['news_dt'], df['sentiment_title_med'], label='Sentiment Title Med', color='red')
ax1.tick_params(axis='y', labelcolor=color)
ax1.legend(loc='upper left')

ax2 = ax1.twinx()
color = 'tab:purple'
ax2.set_ylabel('Closing Price', color=color)
ax2.plot(stock_data.index, stock_data['Close'], label='Closing Price', linestyle='--', color='purple', linewidth=5.5)  # Increased linewidth
ax2.tick_params(axis='y', labelcolor=color)
ax2.legend(loc='upper right')

plt.title(f'Sentiment Trends and Closing Prices for {stock_symbol}')
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

def get_stock_news(stock_name):
    googlenews = GoogleNews(lang='en')
    googlenews.search(stock_name + ' stock')
    result = googlenews.results()

    headlines = []
    for item in result:
        headlines.append(item['title'])

    return headlines

def calculate_average_sentiment(headlines):
    total_sentiment = 0
    for headline in headlines:
        analysis = TextBlob(headline)
        total_sentiment += analysis.sentiment.polarity

    if headlines:
        average_sentiment = total_sentiment / len(headlines)
    else:
        average_sentiment = 0

    return average_sentiment

def main():

    headlines = get_stock_news(stocks[0])
    if headlines:
        print("\nLatest Financial News Headlines:")
        for i, headline in enumerate(headlines, 1):
            print(f"{i}. {headline}")

        average_sentiment = calculate_average_sentiment(headlines)
        print(f"\nAverage sentiment score: {average_sentiment:.2f}")
    else:
        print("No headlines found for this stock.")

if __name__ == "__main__":
    main()